// Code generated by go-bindata.
// sources:
// scripts/scripts/flexrex
// DO NOT EDIT!

// +build !agent,!controller

package scripts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _flexrex = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x7b\x57\xdb\xb8\xb6\xff\x3b\xfe\x14\xbb\x4e\x3a\x90\x73\x70\x20\xf4\xf4\xae\xbb\xc2\x84\xb9\x29\x09\x53\xee\x40\x60\x91\xc0\xb4\xab\xe1\xb2\x14\x5b\x4e\x34\x38\x92\x2b\xc9\x3c\x86\xe6\xbb\xdf\xa5\x87\x9f\x09\x94\x3e\x86\x3f\x80\xd8\x5b\x5b\xfb\xf1\xdb\x0f\x6d\xa5\xfe\x6a\x7b\x4a\xe8\xb6\x98\x3b\x4e\x1d\x0e\x58\xfc\xc0\xc9\x6c\x2e\x61\x77\xa7\xfd\x5f\xd0\xc7\x51\x04\x83\x93\x03\xa7\xee\xd4\xe1\x98\xf8\x98\x0a\x1c\x40\x42\x03\xcc\x41\xce\x31\xf4\x62\xe4\xcf\x71\xfa\x66\x0b\x2e\x31\x17\x84\x51\xd8\x6d\xed\xc0\xa6\x22\x70\xed\x2b\xb7\xb9\xe7\xd4\xe1\x81\x25\xb0\x40\x0f\x40\x99\x84\x44\x60\x90\x73\x22\x20\x24\x11\x06\x7c\xef\xe3\x58\x02\xa1\xe0\xb3\x45\x1c\x11\x44\x7d\x0c\x77\x44\xce\xf5\x36\x96\x49\xcb\xa9\xc3\x47\xcb\x82\x4d\x25\x22\x14\x10\xf8\x2c\x7e\x00\x16\x16\xe9\x00\x49\x2d\xb0\xfa\x99\x4b\x19\x77\xb6\xb7\xef\xee\xee\x5a\x48\x0b\xdb\x62\x7c\xb6\x1d\x19\x42\xb1\x7d\x7c\x74\x30\x18\x8e\x06\xde\x6e\x6b\x47\x2f\xb9\xa0\x11\x16\x02\x38\xfe\x9c\x10\x8e\x03\x98\x3e\x00\x8a\xe3\x88\xf8\x68\x1a\x61\x88\xd0\x1d\x30\x0e\x68\xc6\x31\x0e\x40\x32\x25\xef\x1d\x27\x92\xd0\xd9\x16\x08\x16\xca\x3b\xc4\xb1\x53\x87\x80\x08\xc9\xc9\x34\x91\x25\x63\xa5\xd2\x11\x51\x22\x60\x14\x10\x05\xb7\x37\x82\xa3\x91\x0b\xef\x7a\xa3\xa3\xd1\x96\x53\x87\x3f\x8f\xc6\xef\x4f\x2f\xc6\xf0\x67\xef\xfc\xbc\x37\x1c\x1f\x0d\x46\x70\x7a\x0e\x07\xa7\xc3\xfe\xd1\xf8\xe8\x74\x38\x82\xd3\x43\xe8\x0d\x3f\xc2\x1f\x47\xc3\xfe\x16\x60\x22\xe7\x98\x03\xbe\x8f\xb9\x92\x9f\x71\x20\xca\x8c\x38\x50\x36\x1b\x61\x5c\x12\x20\x64\x46\x20\x11\x63\x9f\x84\xc4\x87\x08\xd1\x59\x82\x66\x18\x66\xec\x16\x73\x4a\xe8\x0c\x62\xcc\x17\x44\x28\x67\x0a\x40\x34\x70\xea\x10\x91\x05\x91\x48\xea\x27\x2b\x4a\xb5\x1c\x6d\x3c\x9f\x2d\x16\x98\x4a\x88\x08\xc5\x30\xc5\x11\xbb\x53\x56\xc2\xd4\x58\x8f\xcd\x66\x84\xce\x9c\xfa\xe1\xf1\xe0\xc3\xf9\xe0\xc3\x75\x7f\xf0\xee\xe2\xf7\x6e\x5b\x2d\x1d\x32\x89\x45\x47\xf9\xcc\x83\xb3\x08\x23\x65\x26\x2a\x24\x8a\x22\x70\xff\xfa\xec\x42\x8c\xfc\x1b\x25\xe0\x14\x87\x8c\x63\x48\x84\x92\x51\xc3\x27\xe0\xe4\x16\xf3\xd6\xda\xa5\x88\x06\xe0\x33\x1a\x92\x59\xc2\x31\x9c\x0f\x3e\x78\xe7\xe8\xe1\x49\x1e\x4a\x0e\x21\x03\xcc\xb9\x83\x39\xdf\x6c\xc2\xa3\x53\x0b\xf0\x34\x99\x81\x1b\x22\x12\x29\x16\x42\x22\x99\x08\x17\xdc\xc6\xbf\x5c\xa7\x16\x73\x42\x65\x08\xee\xeb\xa9\x79\x02\xed\xfd\x5f\x76\x9d\xa5\xe5\xc3\x12\xe9\x44\x6c\x56\xe2\x23\x12\xdf\x57\xfe\xf9\x0a\x9f\xfd\x5f\xda\x86\x4d\xc4\x66\x3a\x3e\x1c\xbd\xde\xb0\x22\x21\x7c\x02\xb7\x51\x32\xa2\x0b\x5d\x70\xdb\x2e\x5c\xed\x29\xa7\x50\xa7\x96\xf3\x14\xe0\x41\xf1\xd7\x84\xaa\x4d\x36\x03\x24\x31\xfc\xdb\x7d\xfd\xd1\x7b\xbd\xf0\x5e\x07\xf0\xfa\x7d\xe7\xf5\x49\xe7\xf5\xc8\x6d\xaa\xd7\x6d\xf5\xeb\xf1\xf2\xf4\xf8\xe2\x64\x70\xd4\x5f\xaa\x4f\xbb\x2e\xec\xef\xc3\xf6\x2d\xe2\xdb\x11\x9b\x6d\x87\x11\xbe\xe7\xf8\xbe\x15\xb1\x99\x53\x0b\x89\x11\x37\xc0\x12\xfb\x12\xee\xe6\xc4\x9f\xc3\x94\x50\xc4\x1f\x14\xda\xd1\x2d\x22\x91\x82\x40\x07\x38\xbe\xe7\xe8\xc1\xf3\x23\xa2\x60\xc2\xb8\x7d\xe0\x68\xa5\xbc\x7b\xd8\x4e\x04\xd7\xe9\xa8\x4c\x98\xe9\x75\x3e\xf8\x70\xde\xfb\x78\xfd\xee\x68\xd8\x5d\x4f\xea\xe0\xe8\x09\x5e\x2f\x61\x62\x56\x1b\xf9\xcb\x12\xec\xc3\x76\x80\x6f\xb7\x69\x12\x45\xb0\xbb\xff\x4b\x7b\x0d\xaf\xc6\xe6\x9a\x85\xcd\x55\x96\xdf\xce\x4b\x31\x11\xd8\xa9\x61\xce\x61\xe3\x11\x5c\x0b\x9f\x0e\xb8\x87\x06\x98\xee\x16\xb8\x0b\x2c\x04\x9a\xe1\xf4\xa9\x49\x50\x21\xa1\x41\xba\xad\x71\xc8\xd2\x5d\x6e\x38\x35\x7c\x4f\x24\xb4\x9d\x90\x38\x8e\xc5\xa4\x01\x97\x02\xdc\xc6\x63\x61\x83\x91\x79\x9b\x2f\xda\x51\xae\x4e\xd4\x4e\x66\x85\x92\xc9\xc5\x9c\x33\xde\x01\x42\x6f\x51\x44\x02\xd0\xaf\x27\xd4\xb5\x6f\x27\xb2\xb1\x03\x84\x12\x59\x79\x84\xa4\x44\xfe\x1c\x7e\xfd\x4b\x30\x0a\x31\xe2\x68\x21\xf6\x2b\x24\x01\x36\x24\x0b\x96\x50\x09\x01\xbe\x25\x3e\xae\xd2\x98\x77\x29\x09\xe1\xfb\x15\xf2\xf2\x06\xb0\xd9\x6e\xbd\x05\x46\xa3\x87\x66\x85\x4f\x42\x57\x39\x3d\x49\x7c\x87\x88\x0c\x19\x4f\x55\x78\x66\xc3\x55\x59\x0d\xd9\x8b\x25\x5e\x27\xe4\x2a\x8b\x12\xd5\x0c\xcb\x5b\x16\x25\x0b\x4c\xd1\x02\x3f\xc3\x8d\x08\xa3\x00\x0e\x2a\x46\xfa\x95\xb2\x40\x2f\xd6\xf4\x06\x2c\x4b\xc7\x21\x42\x6f\x88\x03\xe3\xfb\x93\xd3\x8b\xe1\xb8\xdb\xd8\x54\x28\x5b\x50\x09\x1e\x55\x69\xe3\x64\x38\x3e\xeb\x8d\xdf\x2f\x5d\xd8\xdd\xcf\x81\xfe\x05\xfc\x44\x82\x17\x6c\xc0\x06\x78\x61\xbb\x99\x25\xb2\x47\xcd\x65\xa9\x53\x58\x71\xb1\x0d\x57\xc0\xfe\x9c\x41\x7b\x0f\x54\x08\x98\x0f\x3b\x7b\x90\x66\x9c\x73\x53\xa8\x05\x34\xfe\x77\x74\x3a\xbc\x3e\xeb\x9d\xf7\x4e\x46\x0a\xf8\x53\x0c\x02\x4b\x5d\xfc\xa4\x80\x46\x9a\xca\x9c\x5b\x16\x91\x20\xe4\x6c\xa1\xd4\x35\x5a\xa4\xef\xba\x8d\x4d\xcd\xde\x6d\x3c\x16\x98\x2d\x5d\xf8\x02\x7f\x7d\x06\x8f\xc3\x46\xcb\x18\xf5\xa8\xbf\x91\x8a\xef\xfd\x5d\x49\x94\x57\xf0\xe5\x8b\x51\xab\xf0\xb0\x0b\xda\x04\x79\x76\xd6\x1e\x78\x9c\xd8\x38\x9b\xb8\x1d\x98\xa4\xa1\x3c\x71\xb7\x60\x92\x06\xb3\x79\x73\x61\xea\xa7\xaa\xa4\xf7\x92\x23\x5f\x42\x2a\xc7\xc4\x5d\xba\x8a\x9d\x71\x50\x6d\xd5\x2a\xa9\x10\x6b\x4c\xa2\x8a\xc7\xe9\xc5\xf8\xec\x62\xec\x18\xb8\x10\x1a\x32\xd5\x72\xc5\x48\xce\x8d\x65\x72\x92\x6e\x63\xb3\xf1\x98\xe7\xa7\xa5\x95\x00\x22\x51\x51\xd5\xf3\xd4\x72\xf0\xbc\x90\xf1\x05\x92\xa0\x51\x55\xc0\x41\xf3\x1b\x24\xec\x0f\x2e\x9d\x0c\xc9\x06\xf1\x46\xae\x3a\x9c\xa0\x1b\x0c\xbe\xaa\xf1\x92\x29\xb4\xdb\xc8\x01\xa5\x83\x53\x5b\xd5\xc7\xa9\xf5\x07\x97\x05\x07\xe7\x9a\x95\xfc\xfb\x69\xe7\xaa\x65\x22\x42\xb5\x31\x42\x7d\x34\x8c\x87\x68\x81\xcb\x4e\xef\x0f\x2e\x8b\xf5\xd6\x16\xf8\x8a\xb8\xae\x69\x1d\x4c\x2e\x2e\x88\xa9\xc3\xd2\xb3\x89\xf9\x9a\x63\x11\x33\x2a\x70\x07\xca\x82\x7d\x33\x50\xd2\x0e\x27\x20\x81\xee\xb1\x39\x96\x09\xa7\x90\xc5\x78\x61\xf7\x55\xe4\x18\xdd\x5e\x81\x37\x55\x06\xea\x0f\x2e\x97\xee\x77\x23\xf6\xd2\xa0\xa3\x80\x0c\x2d\x8f\x6a\x4e\x55\x31\x45\x12\xcc\x0e\x3f\x82\xdf\xde\x78\xdc\x3b\x78\x7f\x3d\x1a\xf7\xc6\x17\x23\x85\x13\xa3\xa6\x11\xd0\xe0\xa4\x44\xf2\x0d\x10\x7e\x02\xbb\x06\x28\x55\x94\x8c\x24\x92\x39\x36\xbe\xda\x98\xf9\xaa\x41\x75\xcb\xd2\xbb\x40\xd4\xab\x9a\xca\x8a\xb5\x9a\x4d\x48\xf6\xdd\xf5\xb0\x77\x32\xe8\xba\x09\xbd\xa1\xec\x4e\xd5\xa0\x5a\xad\xb6\xb7\xa7\xfe\xec\x3e\x4d\x9d\x7a\xbc\x48\xfe\xe6\x19\xf2\xb4\x41\x2b\xd2\xff\xe7\x39\x61\xd6\xad\xc0\x02\xf9\xa5\x48\x28\x3a\xc4\x05\xd7\xda\xdb\x7c\x56\x7d\x61\x6a\xf5\x22\x73\x85\x07\x03\x03\xb3\xda\x38\xb2\x90\x8f\xbb\x8d\xb6\x53\x2b\x65\x71\xa7\x76\x78\x7a\x7e\x30\xb8\x36\x26\xcd\x83\xbc\x5d\x8c\xec\x90\x71\x1f\xf7\x34\x4b\xe5\xab\xe2\x8a\xeb\xfe\xe0\xb8\xf7\xf1\xeb\xeb\xfa\x38\x42\x0f\x6a\xb1\x95\xba\x77\xd9\x3b\x3a\xee\xbd\x3b\x1e\x74\x77\x9c\xdc\xfb\x05\xc6\xda\xf9\x92\x27\xb8\xe8\x7f\x12\x82\xdd\x67\x55\x06\xb5\xf1\x8c\xe3\x18\x36\xfe\xcf\x9b\x3c\xee\x6c\xb5\x27\xcb\x4f\x9f\x3a\x01\x99\x11\xd9\xb9\xba\x9a\x3c\xb6\xb7\x26\xcb\xc6\x46\xb1\x7f\xcc\xd8\xd6\xac\x0d\x0f\xde\x0f\x0e\xfe\x50\x58\xdf\x84\x55\xfe\xb0\x0d\x6f\xa1\xa9\xfd\x7a\xa0\x8a\xee\xe0\xbc\xbb\x53\xf8\x70\x7d\x7c\xfa\xfb\xef\x83\x7e\xb7\xad\x9e\xdd\xcd\xd5\xb9\x5c\xa9\x64\xdf\xba\xe0\x45\x12\xdc\x46\x69\x23\xad\x59\xc0\x34\x08\x2a\x1e\xd7\xcf\xac\x55\x2a\x68\xf7\xf0\x67\x70\x77\x8b\x56\xa9\x65\xb8\x31\x2c\x72\xb8\xa8\xf3\x43\xc4\x31\x0a\x1e\xb2\x3c\xb6\x05\xe2\x86\xc4\xb1\x3a\xbe\xe5\x61\x68\x80\x98\xf9\x46\x6f\x98\xea\x52\xab\x4d\x39\x46\x37\x1a\xd6\x35\x7b\x40\x58\x2f\xd4\x9b\x97\x0b\x95\x46\xc0\x16\x68\xe6\x4a\x9a\x88\xb1\xb8\x22\x47\x86\x91\x55\x41\x54\xce\x5d\xb3\x85\x88\x30\x8e\xc9\x8c\xea\x63\xfa\x5b\x10\xd8\x67\x34\x10\x80\x42\x89\x79\x1a\x3c\xfe\x1c\xfb\x37\x66\x27\x4d\x0e\x6f\xf5\xff\x4a\xab\xcd\x4d\x48\x7d\x6b\xff\xfe\xbb\x0d\xcd\xa6\x0b\x1e\xc5\xb0\x03\x57\x6b\x08\x53\xbf\x97\x3f\xae\x2e\x0b\x18\xc5\x8e\x95\xdb\xda\xb0\x62\xee\xd5\x74\x97\xe6\xe0\xc1\x87\xa3\xf1\xf5\xc1\x69\x7f\xa0\x11\x97\xf9\xa0\x6a\xa6\x35\x0c\xaa\xf6\x31\xff\x68\xe7\x6b\x93\x58\x97\x94\x33\xd2\xf3\x5d\x8b\xed\xda\x2b\x69\x9f\x3c\xd7\xb5\xac\xd3\xa4\xf1\xdb\x3a\xf9\x6c\x51\x37\x9f\xb3\xda\x0e\x8d\xc7\x62\x59\xd7\xc7\xb9\xd5\xb5\x2a\xdb\xe4\xb0\xb6\x0a\x4a\xb2\x30\xa3\x1d\xc2\xf5\xf8\xe5\x47\x15\xf4\xf1\xaa\xa2\xe9\xb1\xde\x08\xaf\x4e\xf5\x3f\x5b\x65\x75\xd4\x4c\xf5\xfe\x07\xbc\xb3\x56\x52\xbd\x67\x39\xda\x33\x02\x83\x6c\x77\x67\x4d\x13\x97\xe9\x45\x19\xfd\x1b\x73\xd5\x76\x13\x09\x3e\x0b\x30\x04\x09\xcf\xfd\xa3\xfa\xb5\x2a\xdb\x1f\xe8\xda\x4c\xb7\x86\x03\xd0\xa7\xe9\xf2\x56\xab\x8d\x92\x53\xab\x9b\xd0\x57\x69\x62\x37\x4b\x13\x76\xb8\xa5\x13\x84\x5a\x6e\x5b\x3e\xd3\x03\x9b\x05\xbb\x4e\xd6\x41\x9b\x55\x5f\x6b\xa4\xb3\x76\xd6\xcc\x07\xaa\x9a\xd9\x11\x81\xd1\xcc\x10\x4e\xdc\xce\xc4\x2d\xb6\x78\xf9\xe8\xa0\x74\x70\x36\xd5\x7d\xf0\xe1\x6c\x70\x30\x1e\xf4\xaf\x75\x8f\xde\xae\x94\xfb\xdd\x95\x72\xbf\x22\x95\x76\x71\xe3\xb1\xc8\x67\x09\xaf\xba\xb6\xc9\x5c\x75\x70\x49\x06\x17\xac\xd0\xaa\x2d\x4d\x28\xbe\x8f\xb1\x2f\x71\x00\x11\xf3\x75\xb8\xb5\x20\x64\x09\x0d\x3a\x96\xdb\x16\xa4\x14\x9d\xea\x96\xff\xa4\xeb\x55\xd2\xfd\x71\xe3\xe7\xe7\xfd\x17\xf5\x55\x2b\x15\xfd\xa5\x95\xf3\xab\x92\xa6\x62\x4c\xdc\xce\x98\x27\x38\x07\xf7\x8e\x51\xf5\xbb\x8e\x1b\xea\x88\x91\x33\xae\x6c\x73\x88\x22\x81\x97\xa5\x69\xc6\xda\x83\x06\xa2\x41\xfa\xe9\xfa\xac\x37\x7e\x5f\x38\x79\x98\x61\x54\x69\x0a\xfb\x58\xa0\x34\x23\x8c\x35\xf9\xc4\xac\x73\xd3\x7f\x94\x6b\x0d\x7e\x95\xd6\x6b\x53\xa0\x1d\x7b\x79\xa4\x92\x05\xf7\xcb\x83\x43\xa7\x56\xeb\x0f\xd6\x65\xe8\x54\xba\xea\xdb\xe5\xba\xac\xf7\x53\x31\x6b\x24\xb7\xe9\x2a\xcb\x57\xc6\xa7\x26\xf9\x57\x8d\x92\xb7\x54\x7e\xc2\x39\xa6\x32\x7a\x00\x3b\x65\x52\xb6\xaf\x98\xf8\x67\x1c\x45\xd7\x6e\xa5\xcf\xa4\xc5\xad\xd6\xa5\xdc\x67\x71\x5d\x0e\x35\xa3\x9f\x51\xae\x3a\x67\x6a\xbf\x3c\xb4\x94\xb7\x76\x5f\x1c\x5a\x2b\x71\xb4\x6e\x12\x52\x50\xf2\x65\x13\x91\x33\x24\xd5\xa1\xc9\xa9\x19\x9d\x72\xed\x8a\x33\x99\x34\x77\xff\xc4\x29\x42\xdf\xa4\x65\x9b\xc5\x03\x86\x85\x0e\x71\x7c\x4f\x84\x5c\x5b\x10\xe1\xcf\x39\xa6\x7a\x5c\x0b\x33\x72\x8b\xa9\xbe\xa1\x32\x42\x6e\xc1\x1d\x86\x39\xba\xd5\x63\xb4\x05\x92\xfe\x1c\x98\x79\x9f\x1f\x21\x34\x78\x49\x24\x40\x65\x40\x50\x35\xd1\xb8\x4f\xa4\x36\x7b\x6e\x86\xf0\xf5\xc1\x57\xf9\x6c\x72\x32\x18\x8e\xaf\x55\x7c\x1e\x1d\x7f\x33\xdb\xcc\x3d\x9f\x5a\x9f\xae\xe0\x0b\x3c\x52\xb4\xc0\x1d\x68\xa9\x3f\x5b\x40\x82\x0e\xb4\x48\xb0\x65\x35\xef\x3c\x3d\xd1\xda\xd2\x7d\x41\x47\x3b\x78\xa9\x18\x19\x76\x02\x47\xd8\x97\x9b\x96\x10\xba\x5d\xd8\x98\xb8\xa9\x37\x27\xee\x46\x33\x3f\x04\x97\xa6\xa6\x4f\xea\x57\x42\x14\x09\x0a\x67\xe8\x0a\x08\x5f\xc6\x21\x4e\xf1\x98\x4f\xe3\x52\x69\xbe\x1f\x6c\x07\x2c\x89\xcc\xd4\x4c\xdf\x99\x08\x96\xa8\x46\xd9\x3a\x42\xf5\x58\x41\x11\x8d\xeb\xe0\x57\x88\x0e\xa6\xb3\x8a\x1d\x92\x9b\x89\xb6\x0e\x0e\x1d\x24\xbb\x4e\xed\x70\x34\xfe\x78\x36\xc8\x15\x7f\x53\x0a\x39\xf7\x26\x99\x62\x4e\xb1\xc4\xa2\x45\xd8\x76\x28\xc6\x0f\x31\x76\xaf\x72\x95\x7f\x4e\x78\xbd\x38\xae\x6c\x6a\xda\xcc\xa6\xff\x4d\x5b\xf3\xd5\x41\x0d\xb2\xdd\xed\x45\x92\x5d\x74\x79\x7a\x9c\x69\x39\x8d\x6e\x48\x00\x1e\x83\x24\xc0\xb7\xb9\xe0\xe5\xd1\x9a\x1e\x7c\xb8\x47\xfd\xeb\xc3\xd1\xb5\x5a\xe7\xa6\x37\x06\x6e\xd7\x05\x2f\xdc\x6d\x96\x8a\xae\xe1\xbd\x5a\x72\x0f\x4e\xfa\x5d\x77\x71\x13\x0a\xf0\x54\x42\x4f\xc9\xf2\x9a\x68\x9e\xe8\x75\xf8\x5e\xfe\xa7\x54\x08\xf5\xe2\xc6\xe3\xc1\x49\x7f\x09\xde\xa1\x5b\x3c\xa8\x16\x96\xdd\x87\xe2\xe9\x55\xa1\x5b\x38\x21\xbf\x02\xfb\x38\x53\xf9\xa9\xab\xbf\xd4\x77\xf0\x52\xe7\xe5\x57\x7c\x3e\xc7\x48\x62\x08\x45\xae\xae\x4a\x6d\xeb\xe0\x5a\xae\xc7\xda\x4d\x8b\x9b\x80\x70\xf0\xe2\xf2\xdd\x4b\x55\x4c\xc7\x68\x63\x6e\x9b\x32\x65\x9e\x5d\x52\x01\xe5\x77\x28\x56\xbc\x12\x4b\x8b\x80\xae\xd2\xe9\xa6\x6b\x66\xd8\x29\x06\x97\x8e\x63\x6f\xca\x56\x83\xf0\x49\x38\xef\xe4\x70\x06\xcb\x48\xdf\x34\x19\xe5\x93\x4c\xfb\x1f\x51\x3a\xed\x4c\x9f\xd0\x39\xbd\x83\xcc\x8e\xc2\x2f\x56\xb7\x74\xe5\xf7\x92\xee\x3e\xcb\xc1\x7a\xa6\xfb\x93\x86\xe3\x59\xcf\x60\xb2\x7c\x35\x41\xeb\xbd\x7e\x46\x8e\x56\x27\x55\x7d\x89\xc2\xc2\x54\xd4\xac\x7a\xe8\x31\x32\xdc\x12\x94\x7e\xe3\xa3\x05\x7d\x95\xe3\x88\x4d\x71\xbf\x7d\x73\x67\xa7\x04\x31\xbb\x0c\xf5\xd5\x89\x3e\x5f\x15\x77\xab\x36\x7f\x2c\x56\x06\x77\x2c\xd2\x58\xac\xf3\x06\xa1\x44\xe6\xd7\x9a\x45\x80\x59\xba\xba\x1d\xb1\xe6\xfd\x9e\xb9\x49\xd7\x34\x8e\x98\x93\x50\x3a\x8e\x6d\x9f\x35\x53\xfd\xf5\x11\xc7\xde\x28\xa8\x07\x84\x3a\x35\x53\xed\x9b\x4e\xad\x96\x0d\x52\xfe\x47\xa9\xbb\xb7\x97\x96\xa8\x66\x9a\x0d\x3d\x6c\xc6\xdd\xa5\x69\x5b\xde\xd8\xa5\x2b\xf3\x69\x55\xde\xd2\xa6\xef\x74\xaa\x53\xac\x35\x6e\x15\xe7\x3a\xbc\x01\xc4\x67\x7a\xc2\x7f\xf3\xdf\x02\xda\xad\xb7\x20\xe4\x43\x84\xf3\x1c\x5c\x5f\x3b\x6d\xb5\x55\xb3\xc4\xb9\x0e\x7d\x1c\x62\xae\x42\x43\xf1\x0a\x70\x88\x92\x48\xc2\x94\xd0\xc0\x33\xd4\x82\xe8\xaf\x8a\x61\x10\x49\x1c\x33\x2e\x8b\x57\xec\x4f\x00\x6c\xc8\x64\x4a\xad\xc2\x71\x99\x5a\xc7\x06\x9f\x51\x22\x15\x3d\x46\x42\x28\xf0\x50\x40\x36\x23\xc5\x8c\x50\x09\x73\xcc\xf1\x33\x76\x4c\x03\xf9\x07\x95\x29\x5d\xf7\x7f\xa3\x3a\xa5\x29\x87\x52\xaa\xfc\x9d\x85\x02\x2c\x0a\x7b\x28\xba\x8a\x23\x0a\xa6\xc9\x69\x2a\xfa\x29\x9a\x52\x06\x52\x34\xe5\x6f\x21\x14\x28\xf3\x31\x44\xd3\x81\xca\x4f\xe1\x2b\x09\x7a\x45\xf5\xbd\x5a\xff\xaf\xe6\x77\xdc\xa1\x67\x26\x02\x9f\x2d\x16\x88\x06\xe5\x34\xa0\x6f\xaf\x1c\xfb\xe1\xff\x03\x00\x00\xff\xff\x4b\x0d\x9b\x21\x14\x29\x00\x00")

func flexrexBytes() ([]byte, error) {
	return bindataRead(
		_flexrex,
		"flexrex",
	)
}

func flexrex() (*asset, error) {
	bytes, err := flexrexBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flexrex", size: 10516, md5checksum: "3a9bae9ff26ea21e3170f94f158b1a1c", mode: os.FileMode(493), modTime: time.Unix(1499266757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"flexrex": flexrex,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"flexrex": &bintree{flexrex, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
